<#@ template language="C#" #>

namespace BladeEngine.ECS;

public interface ISystem
{
	public Archetype Archetype { get; }
	internal Action<ArchetypeBuffer> ExecutionDelegate { get; }
	protected static readonly ParallelOptions ParallelOptions = new()
	{
		MaxDegreeOfParallelism = Environment.ProcessorCount / 2
	};
}

<#
	void PrintTypes(int count)
	{
		for (var i = 0; i <= count; i++)
		{
			Write($"T{i}");
			if(i < count) Write(", ");
		}
	}
	
	void PrintParams(int count)
	{
		for (var i = 0; i <= count; i++)
		{
			Write($"ref T{i} t{i}");
			if(i < count) Write(", ");
		}
	}

	void PrintRestrictions(int count)
	{
		for (var i = 0; i <= count; i++)
			WriteLine($"where T{i} : struct, IComponent");
	}
#>

<#
	for (var i = 0; i < 16; i++)
	{
#>
public abstract class System<<#PrintTypes(i);#>> : ISystem
<#PrintRestrictions(i);#>
{
	public abstract Archetype Archetype { get; }
	protected abstract void Run(<#PrintParams(i);#>);

	protected virtual Action<ArchetypeBuffer> ExecutionDelegate { get; }
	Action<ArchetypeBuffer> ISystem.ExecutionDelegate => ExecutionDelegate;
}

<#
	}
#>